// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spire/agent/svidstore/svidstore.proto

package svidstore

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PutX509SVIDRequest struct {
	Svid                 *X509SVID          `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	Selectors            []*common.Selector `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	FederatedBundles     map[string][]byte  `protobuf:"bytes,3,rep,name=federated_bundles,json=federatedBundles,proto3" json:"federated_bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PutX509SVIDRequest) Reset()         { *m = PutX509SVIDRequest{} }
func (m *PutX509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*PutX509SVIDRequest) ProtoMessage()    {}
func (*PutX509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60840e5758815d27, []int{0}
}

func (m *PutX509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutX509SVIDRequest.Unmarshal(m, b)
}
func (m *PutX509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutX509SVIDRequest.Marshal(b, m, deterministic)
}
func (m *PutX509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutX509SVIDRequest.Merge(m, src)
}
func (m *PutX509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_PutX509SVIDRequest.Size(m)
}
func (m *PutX509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutX509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutX509SVIDRequest proto.InternalMessageInfo

func (m *PutX509SVIDRequest) GetSvid() *X509SVID {
	if m != nil {
		return m.Svid
	}
	return nil
}

func (m *PutX509SVIDRequest) GetSelectors() []*common.Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *PutX509SVIDRequest) GetFederatedBundles() map[string][]byte {
	if m != nil {
		return m.FederatedBundles
	}
	return nil
}

type PutX509SVIDResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutX509SVIDResponse) Reset()         { *m = PutX509SVIDResponse{} }
func (m *PutX509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*PutX509SVIDResponse) ProtoMessage()    {}
func (*PutX509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60840e5758815d27, []int{1}
}

func (m *PutX509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutX509SVIDResponse.Unmarshal(m, b)
}
func (m *PutX509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutX509SVIDResponse.Marshal(b, m, deterministic)
}
func (m *PutX509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutX509SVIDResponse.Merge(m, src)
}
func (m *PutX509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_PutX509SVIDResponse.Size(m)
}
func (m *PutX509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutX509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutX509SVIDResponse proto.InternalMessageInfo

type X509SVID struct {
	SpiffeId             string   `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	X509Svid             []byte   `protobuf:"bytes,2,opt,name=x509_svid,json=x509Svid,proto3" json:"x509_svid,omitempty"`
	X509SvidKey          []byte   `protobuf:"bytes,3,opt,name=x509_svid_key,json=x509SvidKey,proto3" json:"x509_svid_key,omitempty"`
	Bundle               []byte   `protobuf:"bytes,4,opt,name=bundle,proto3" json:"bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *X509SVID) Reset()         { *m = X509SVID{} }
func (m *X509SVID) String() string { return proto.CompactTextString(m) }
func (*X509SVID) ProtoMessage()    {}
func (*X509SVID) Descriptor() ([]byte, []int) {
	return fileDescriptor_60840e5758815d27, []int{2}
}

func (m *X509SVID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVID.Unmarshal(m, b)
}
func (m *X509SVID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVID.Marshal(b, m, deterministic)
}
func (m *X509SVID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVID.Merge(m, src)
}
func (m *X509SVID) XXX_Size() int {
	return xxx_messageInfo_X509SVID.Size(m)
}
func (m *X509SVID) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVID.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVID proto.InternalMessageInfo

func (m *X509SVID) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *X509SVID) GetX509Svid() []byte {
	if m != nil {
		return m.X509Svid
	}
	return nil
}

func (m *X509SVID) GetX509SvidKey() []byte {
	if m != nil {
		return m.X509SvidKey
	}
	return nil
}

func (m *X509SVID) GetBundle() []byte {
	if m != nil {
		return m.Bundle
	}
	return nil
}

func init() {
	proto.RegisterType((*PutX509SVIDRequest)(nil), "spire.agent.svidpublisher.PutX509SVIDRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "spire.agent.svidpublisher.PutX509SVIDRequest.FederatedBundlesEntry")
	proto.RegisterType((*PutX509SVIDResponse)(nil), "spire.agent.svidpublisher.PutX509SVIDResponse")
	proto.RegisterType((*X509SVID)(nil), "spire.agent.svidpublisher.X509SVID")
}

func init() {
	proto.RegisterFile("spire/agent/svidstore/svidstore.proto", fileDescriptor_60840e5758815d27)
}

var fileDescriptor_60840e5758815d27 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x9d, 0x52, 0xc5, 0x13, 0x2a, 0x95, 0x85, 0x56, 0x26, 0x5c, 0xa2, 0xa0, 0xa2, 0x80,
	0x84, 0x5d, 0xa5, 0x44, 0x50, 0x8e, 0x0d, 0x1f, 0x8a, 0xb8, 0x54, 0xb6, 0x84, 0x50, 0x2f, 0x56,
	0x5c, 0x8f, 0x5d, 0x0b, 0xd7, 0x6b, 0xf6, 0xa3, 0x22, 0x37, 0x7e, 0x17, 0x12, 0xff, 0x0d, 0xed,
	0x87, 0x53, 0x0c, 0x01, 0xda, 0xd3, 0xee, 0xce, 0x7b, 0x6f, 0xde, 0xec, 0xec, 0x0e, 0x1c, 0xf0,
	0xa6, 0x64, 0x18, 0x2e, 0x0b, 0xac, 0x45, 0xc8, 0xaf, 0xca, 0x8c, 0x0b, 0xca, 0xf0, 0x7a, 0x17,
	0x34, 0x8c, 0x0a, 0x4a, 0x1e, 0x6a, 0x5a, 0xa0, 0x69, 0x81, 0x02, 0x1b, 0x99, 0x56, 0x25, 0xbf,
	0x40, 0x36, 0x34, 0x50, 0x78, 0x4e, 0x2f, 0x2f, 0x69, 0x6d, 0x17, 0xa3, 0x1a, 0x8e, 0x3a, 0x50,
	0x53, 0xc9, 0xa2, 0x6c, 0x17, 0xc3, 0x18, 0x7f, 0x77, 0x81, 0x9c, 0x4a, 0xf1, 0x69, 0x76, 0x78,
	0x1c, 0x7f, 0x5c, 0xbc, 0x89, 0xf0, 0x8b, 0x44, 0x2e, 0xc8, 0x4b, 0xd8, 0x52, 0x26, 0xbe, 0x33,
	0x72, 0x26, 0x83, 0xe9, 0xe3, 0xe0, 0xaf, 0xee, 0xc1, 0x5a, 0xa9, 0x05, 0xe4, 0x05, 0x78, 0x1c,
	0x2b, 0x3c, 0x17, 0x94, 0x71, 0xdf, 0x1d, 0xf5, 0x26, 0x83, 0xe9, 0xbe, 0x55, 0xdb, 0xca, 0x62,
	0x0b, 0x47, 0xd7, 0x44, 0xd2, 0xc0, 0xbd, 0x1c, 0x33, 0x64, 0x4b, 0x81, 0x59, 0x92, 0xca, 0x3a,
	0xab, 0x90, 0xfb, 0x3d, 0xad, 0x9e, 0xff, 0xc3, 0xfb, 0xcf, 0xc2, 0x83, 0x77, 0x6d, 0x9a, 0x13,
	0x93, 0xe5, 0x6d, 0x2d, 0xd8, 0x2a, 0xda, 0xcd, 0x7f, 0x0b, 0x0f, 0xe7, 0xb0, 0xb7, 0x91, 0x4a,
	0x76, 0xa1, 0xf7, 0x19, 0x57, 0xfa, 0xe2, 0x5e, 0xa4, 0xb6, 0xe4, 0x01, 0xdc, 0xb9, 0x5a, 0x56,
	0x12, 0x7d, 0x77, 0xe4, 0x4c, 0xee, 0x46, 0xe6, 0xf0, 0xda, 0x7d, 0xe5, 0x8c, 0xf7, 0xe0, 0x7e,
	0xa7, 0x04, 0xde, 0xd0, 0x9a, 0xe3, 0xf8, 0x9b, 0x03, 0xfd, 0x36, 0x48, 0x1e, 0x81, 0xc7, 0x9b,
	0x32, 0xcf, 0x31, 0xb1, 0xed, 0xf4, 0xa2, 0xbe, 0x09, 0x2c, 0x32, 0x05, 0x7e, 0x9d, 0x1d, 0x1e,
	0x27, 0xba, 0xd7, 0x26, 0x7d, 0x5f, 0x05, 0x62, 0xd5, 0xca, 0x31, 0xec, 0xac, 0xc1, 0x44, 0xd5,
	0xd4, 0xd3, 0x84, 0x41, 0x4b, 0xf8, 0x80, 0x2b, 0xb2, 0x0f, 0xdb, 0xa6, 0x5d, 0xfe, 0x96, 0x06,
	0xed, 0x69, 0xfa, 0xc3, 0x05, 0x4f, 0xd9, 0xc7, 0xea, 0x0b, 0x91, 0x0a, 0x06, 0xbf, 0xd4, 0x49,
	0x9e, 0xdf, 0xaa, 0xa5, 0xc3, 0xe0, 0xa6, 0x74, 0x73, 0x7d, 0x72, 0x06, 0xde, 0x9c, 0xd6, 0x79,
	0x59, 0x48, 0x86, 0xe4, 0xa0, 0xfb, 0xf8, 0xf6, 0xef, 0xad, 0xf1, 0xd6, 0xe3, 0xc9, 0xff, 0x68,
	0x36, 0x77, 0x0e, 0x3b, 0xef, 0x51, 0x9c, 0x6a, 0x78, 0x51, 0xe7, 0x94, 0x3c, 0xdd, 0x28, 0xec,
	0x70, 0x5a, 0x8f, 0x67, 0x37, 0xa1, 0x1a, 0x9f, 0x93, 0xd9, 0xd9, 0x51, 0x51, 0x8a, 0x0b, 0x99,
	0x2a, 0x76, 0x68, 0xde, 0x2b, 0x34, 0xc3, 0xa4, 0xe7, 0x26, 0xdc, 0x38, 0xb5, 0xe9, 0xb6, 0x06,
	0x8f, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x65, 0xdd, 0xf3, 0x0a, 0xd5, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SVIDStoreClient is the client API for SVIDStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SVIDStoreClient interface {
	// Puts an X509-SVID in a configured secrets store
	PutX509SVID(ctx context.Context, in *PutX509SVIDRequest, opts ...grpc.CallOption) (*PutX509SVIDResponse, error)
	// Applies the plugin configuration and returns configuration errors
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the plugin
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type sVIDStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewSVIDStoreClient(cc grpc.ClientConnInterface) SVIDStoreClient {
	return &sVIDStoreClient{cc}
}

func (c *sVIDStoreClient) PutX509SVID(ctx context.Context, in *PutX509SVIDRequest, opts ...grpc.CallOption) (*PutX509SVIDResponse, error) {
	out := new(PutX509SVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.svidpublisher.SVIDStore/PutX509SVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVIDStoreClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.svidpublisher.SVIDStore/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVIDStoreClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.svidpublisher.SVIDStore/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SVIDStoreServer is the server API for SVIDStore service.
type SVIDStoreServer interface {
	// Puts an X509-SVID in a configured secrets store
	PutX509SVID(context.Context, *PutX509SVIDRequest) (*PutX509SVIDResponse, error)
	// Applies the plugin configuration and returns configuration errors
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the plugin
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

// UnimplementedSVIDStoreServer can be embedded to have forward compatible implementations.
type UnimplementedSVIDStoreServer struct {
}

func (*UnimplementedSVIDStoreServer) PutX509SVID(ctx context.Context, req *PutX509SVIDRequest) (*PutX509SVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutX509SVID not implemented")
}
func (*UnimplementedSVIDStoreServer) Configure(ctx context.Context, req *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedSVIDStoreServer) GetPluginInfo(ctx context.Context, req *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}

func RegisterSVIDStoreServer(s *grpc.Server, srv SVIDStoreServer) {
	s.RegisterService(&_SVIDStore_serviceDesc, srv)
}

func _SVIDStore_PutX509SVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutX509SVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDStoreServer).PutX509SVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.svidpublisher.SVIDStore/PutX509SVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDStoreServer).PutX509SVID(ctx, req.(*PutX509SVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVIDStore_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDStoreServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.svidpublisher.SVIDStore/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDStoreServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVIDStore_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDStoreServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.svidpublisher.SVIDStore/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDStoreServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SVIDStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.agent.svidpublisher.SVIDStore",
	HandlerType: (*SVIDStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutX509SVID",
			Handler:    _SVIDStore_PutX509SVID_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _SVIDStore_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _SVIDStore_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/agent/svidstore/svidstore.proto",
}
